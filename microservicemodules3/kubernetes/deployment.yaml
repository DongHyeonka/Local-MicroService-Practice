apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-2
  namespace: microservice-2
  labels:
    app: microservice-2
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: microservice-2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: microservice-2
        tier: backend
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '6000'
        prometheus.io/path: '/actuator/prometheus'
    spec:
      serviceAccountName: microservice-2-sa
      containers:
      - name: microservice-2
        image: microservice-2:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5002
          name: http
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres-service-ms2.microservice-2.svc.cluster.local:5432/microservice-2-db"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret-ms2
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret-ms2
              key: POSTGRES_PASSWORD
        - name: PINPOINT_AGENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PINPOINT_APPLICATION_NAME
          value: "microservice-2"
        - name: PINPOINT_COLLECTOR_IP
          value: "192.168.0.107"
        - name: JAVA_TOOL_OPTIONS
          value: >-
            -javaagent:/app/pinpoint-agent/pinpoint-bootstrap.jar
            -Dpinpoint.agentId=$(PINPOINT_AGENT_ID)
            -Dpinpoint.applicationName=$(PINPOINT_APPLICATION_NAME)
            -Dprofiler.transport.grpc.collector.ip=$(PINPOINT_COLLECTOR_IP)
            -Dprofiler.transport.grpc.collector.port=9991
            -Dpinpoint.profiler.sampling.counting.sampling-rate=1
            -XX:+UseContainerSupport
            -XX:MaxRAMPercentage=75.0
            -Djava.security.egd=file:/dev/./urandom
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1024Mi
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 6000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 6000
          initialDelaySeconds: 40
          periodSeconds: 20
          timeoutSeconds: 2
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: microservice-2-logs-pvc 
